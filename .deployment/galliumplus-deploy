#!/usr/bin/python3

import paramiko
import os
from pathlib import Path
import hashlib

DEPLOY_HOSTNAME = os.environ["DEPLOY_HOSTNAME"]
DEPLOY_USERNAME = os.environ["DEPLOY_USERNAME"]
DEPLOY_PASSWORD = os.environ["DEPLOY_PASSWORD"]

ssh_client = paramiko.SSHClient()
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
password_mask = "".join(["*" for _ in DEPLOY_PASSWORD])
print(
    f"Connexion en tant que {DEPLOY_USERNAME}@{DEPLOY_HOSTNAME} with password {password_mask}"
)
ssh_client.connect(
    hostname=DEPLOY_HOSTNAME,
    username=DEPLOY_USERNAME,
    password=DEPLOY_PASSWORD,
)

print("Recherche de fichiers à téléverser...")

bin_path = Path("./WebService/bin/Release/net8.0")

files_to_upload = [
    bin_path / "WebService",
    bin_path / "WebService.deps.json",
    bin_path / "WebService.runtimeconfig.json",
]
files_to_upload += bin_path.glob("*.dll")
files_to_upload += bin_path.glob("runtimes/linux-x64/native/*")
files_to_upload += bin_path.glob("*/*.resources.dll")


def sha256sum(filename):
    with open(filename, "rb", buffering=0) as f:
        return hashlib.file_digest(f, "sha256").hexdigest()


files_to_upload = [
    (file, sha256sum(file))
    for file in files_to_upload
    if file.is_file() and not "Swagger" in file.name
]

print(len(files_to_upload), " fichiers trouvés ", sep="", end=":")
print("", *(file for file, _ in files_to_upload), sep="\n   ")

print("Recherche de fichiers existants sur le serveur...")
stdin, stdout, stderr = ssh_client.exec_command(
    "for file in WebService WebService.deps.json WebService.runtimeconfig.json *.dll runtimes/linux-x64/native/* */*.resources.dll; "
    'do if [ -f $file ]; then sha256sum "$file"; fi; done;'
)

existing_files = [
    (lambda t: (t[1].strip(), t[0]))(out_line.split("  ", 2))
    for out_line in stdout.readlines()
]
files_to_remove = [file for file, _ in existing_files]

print(len(existing_files), " fichiers trouvés ", sep="", end=":")
print("", *(file for file, _ in existing_files), sep="\n   ")

print("\nArrêt du service...")
stdin, stdout, stderr = ssh_client.exec_command("sudo systemctl stop galliumplus-api")
print(*stdout.readlines(), *stderr.readlines())
print("OK")

print("\nTéléversement des fichiers...")
remote_path = Path("/opt/galliumplus")
ftp_client = ssh_client.open_sftp()

for file_to_upload, checksum in files_to_upload:
    existing_file_and_checksum = next(
        (
            (file, checksum)
            for file, checksum in existing_files
            if file_to_upload.relative_to(bin_path) == Path(file)
        ),
        None,
    )
    if existing_file_and_checksum:
        files_to_remove.remove(existing_file_and_checksum[0])
        if checksum == existing_file_and_checksum[1]:
            print(file_to_upload, "est déjà à jour")
            continue

    print("Envoi de", file_to_upload, "...")
    relative_remote_path = file_to_upload.relative_to(bin_path)
    if str(relative_remote_path.parent) != ".":
        print(
            f"   Vérification du(des) dossier(s) intermédiaire(s) {relative_remote_path.parent}"
        )
        ssh_client.exec_command(f"mkdir -p {remote_path / relative_remote_path.parent}")
    ftp_client.put(
        str(file_to_upload.absolute()),
        str(remote_path / relative_remote_path),
        lambda progress, total: print(f"  {progress/total:.0%}   ", end="\r"),
    )

for file_to_remove in files_to_remove:
    print("Supression du fichier obsolète ", file_to_remove, "...")
    ftp_client.remove(str(remote_path / file_to_remove))

ftp_client.close()
stdin, stdout, stderr = ssh_client.exec_command("chmod g+rx WebService")
print(*stdout.readlines(), *stderr.readlines())
print("OK")

print("\nRedémarrage du service...")
stdin, stdout, stderr = ssh_client.exec_command("sudo systemctl start galliumplus-api")
print(*stdout.readlines(), *stderr.readlines())
print("OK")
